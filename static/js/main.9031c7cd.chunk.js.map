{"version":3,"sources":["containers/Post/Post.js","components/CommentItem/CommentItem.js","containers/ListComments/ListComents.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Post","console","log","this","props","color","class","title","body","Component","CommentItem","comment","name","email","ListComments","comments","map","item","key","App","fetchData","setState","isLoading","colors","randomColor","Math","floor","random","length","rands","Promise","all","fetch","then","res1","res2","json","data1","data2","post","listComment","messageColor","state","className","Container","onClick","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"kMAeeA,G,mLAXP,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,OAEnB,6BACZ,yBAAKC,MAAK,aAASH,KAAKC,MAAMC,MAApB,aACF,yBAAKC,MAAM,UAAUH,KAAKC,MAAMG,OAChC,2BAAIJ,KAAKC,MAAMI,Y,GAPJC,cCYJC,E,uKARP,OACI,6BACI,yBAAKJ,MAAM,WAAU,yBAAKA,MAAM,WAAU,uBAAGA,MAAM,UAAUH,KAAKC,MAAMO,QAAQC,MAAS,yBAAKN,MAAM,YAAW,8BAAOH,KAAKC,MAAMO,QAAQE,QAAmB,yBAAKP,MAAM,QAAQH,KAAKC,MAAMO,QAAQH,a,GALxLC,aCkBXK,E,uKAfP,OACI,6BACG,yBAAKR,MAAM,oBACP,wBAAIA,MAAM,sBAAV,YAEEH,KAAKC,MAAMW,SAASC,KAAI,SAACC,EAAKC,GAC1B,OAAO,kBAAC,EAAD,CAAaA,IAAKA,EAAKP,QAASM,a,GARrCR,a,SCyDZU,E,kDApDb,WAAYf,GAAO,IAAD,8BAChB,cAAMA,IASVgB,UAAY,WACV,EAAKC,SAAS,CAAEC,WAAW,IAC3B,IAAMC,EAAS,CAAC,MAAM,SAAS,SAAS,QAAQ,QAAQ,OAAO,OAAO,SAAS,SAAS,OAAO,QAAQ,SACjGC,EAAcD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SACvDC,EAAQJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAChDG,QAAQC,IAAI,CACVC,MAAM,8CAA8CH,GACpDG,MAAM,wDAAwDH,KAEjEI,MAAK,mCAAEC,EAAF,KAAQC,EAAR,YAAkBL,QAAQC,IAAI,CAACG,EAAKE,OAAQD,EAAKC,YACtDH,MAAK,mCAAEI,EAAF,KAASC,EAAT,YAAoB,EAAKjB,SAAS,CACtCkB,KAAMF,EACNG,YAAaF,EACbG,aAAejB,EACfF,WAAW,QAtBT,EAAKoB,MAAQ,CACTH,KAAM,GACNC,YAAa,GACbC,aAAe,GACfnB,WAAW,GANC,E,gEA8BhBnB,KAAKiB,c,+BAMN,OAA4B,GAAxBjB,KAAKuC,MAAMpB,UACP,yBAAKhB,MAAM,qCAIlB,yBAAKqC,UAAU,OACf,kBAACC,EAAA,EAAD,KACA,4BAAQC,QAAS1C,KAAKiB,UAAWd,MAAM,wBAAuB,uBAAGwC,cAAY,OAAOxC,MAAM,cAA1F,YACE,kBAAC,EAAD,CAAMD,MAASF,KAAKuC,MAAMD,aAAclC,MAASJ,KAAKuC,MAAMH,KAAKhC,MAAOC,KAAML,KAAKuC,MAAMH,KAAK/B,OAC9F,kBAAC,EAAD,CAAcO,SAAUZ,KAAKuC,MAAMF,oB,GA9CvB/B,aCKEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9031c7cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Post extends Component {\r\n    render() { \r\n        console.log(this.props.color)\r\n        return (\r\n            <div>\r\n<div class= {`ui ${this.props.color} message`} >\r\n        <div class=\"header\">{this.props.title}</div>\r\n        <p>{this.props.body}</p>\r\n</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Post;","import React, { Component } from 'react';\r\n \r\nclass CommentItem extends Component {\r\n    render() { \r\n\r\n        return (\r\n            <div>\r\n                <div class=\"comment\"><div class=\"content\"><a class=\"author\">{this.props.comment.name}</a><div class=\"metadata\"><span>{this.props.comment.email}</span></div><div class=\"text\">{this.props.comment.body}</div></div></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default CommentItem;","import React, { Component } from 'react';\r\nimport { Divider } from 'semantic-ui-react'\r\nimport  CommentItem  from '../../components/CommentItem/CommentItem'\r\nclass ListComments extends Component {\r\n    render() { \r\n        return (\r\n            <div>\r\n               <div class=\"ui mini comments\">\r\n                   <h3 class=\"ui dividing header\">Comments</h3>\r\n                 {\r\n                     this.props.comments.map((item,key) => {\r\n                         return <CommentItem key={key} comment={item}></CommentItem>\r\n                     })\r\n                 }\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ListComments;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Post from './containers/Post/Post'\nimport  ListComments  from './containers/ListComments/ListComents'\nimport { Container } from 'semantic-ui-react'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        post: [],\n        listComment: [],\n        messageColor : \"\",\n        isLoading: false,\n    };\n}\n\nfetchData = () => {\n  this.setState({ isLoading: true });\n  const colors = [\"red\",\"orange\",\"yellow\",\"olive\",\"green\",\"teal\",\"blue\",\"violet\",\"purple\",\"pink\",\"brown\",\"black\"]\n  const randomColor = colors[Math.floor(Math.random() * colors.length)];\n  const rands = Math.floor(Math.random() * 100) + 1;\n  Promise.all([\n    fetch('https://jsonplaceholder.typicode.com/posts/'+rands),\n    fetch('https://jsonplaceholder.typicode.com/comments?postId='+rands)\n])\n.then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\n.then(([data1, data2]) => this.setState({\n  post: data1, \n  listComment: data2,\n  messageColor : randomColor,\n  isLoading: false\n}));\n }\n\n\ncomponentDidMount() {\n    this.fetchData();\n  }\n\n\nrender() { \n\n   if (this.state.isLoading == true){\n    return <div class=\"ui active centered inline loader\"></div>;\n   } \n\n  return (\n    <div className=\"App\">\n    <Container>\n    <button onClick={this.fetchData} class=\"ui blue basic button\"><i aria-hidden=\"true\" class=\"undo icon\"></i>Loadpost</button>\n      <Post color = {this.state.messageColor} title = {this.state.post.title} body={this.state.post.body}/>\n      <ListComments comments={this.state.listComment}/>\n    </Container> \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}